//
//  Moya+RxSwift.swift
//  Caixin
//
//  Created by Origin on 2017/12/19.
//  Copyright © 2017年 Yicai.Network. All rights reserved.
//

import Foundation
import RxSwift
import HandyJSON
import Moya

/// Extension for processing raw NSData generated by network access.
extension PrimitiveSequence where TraitType == MaybeTrait, ElementType == Response {
    
    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filter(statusCodes: ClosedRange<Int>) -> Maybe<ElementType> {
        return flatMap { response -> Maybe<ElementType> in
            return Maybe.just(try response.filter(statusCodes: statusCodes))
        }
    }
    
    public func filter(statusCode: Int) -> Maybe<ElementType> {
        return flatMap { response -> Maybe<ElementType> in
            return Maybe.just(try response.filter(statusCode: statusCode))
        }
    }
    
    public func filterSuccessfulStatusCodes() -> Maybe<ElementType> {
        return flatMap { response -> Maybe<ElementType> in
            return Maybe.just(try response.filterSuccessfulStatusCodes())
        }
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> Maybe<ElementType> {
        return flatMap { response -> Maybe<ElementType> in
            return Maybe.just(try response.filterSuccessfulStatusAndRedirectCodes())
        }
    }
    
    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    public func mapImage() -> Maybe<Image?> {
        return flatMap { response -> Maybe<Image?> in
            return Maybe.just(try response.mapImage())
        }
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON(failsOnEmptyData: Bool = true) -> Maybe<Any> {
        return flatMap { response -> Maybe<Any> in
            return Maybe.just(try response.mapJSON(failsOnEmptyData: failsOnEmptyData))
        }
    }
    
    /// Maps received data at key path into a String. If the conversion fails, the signal errors.
    public func mapString(atKeyPath keyPath: String? = nil) -> Maybe<String> {
        return flatMap { response -> Maybe<String> in
            return Maybe.just(try response.mapString(atKeyPath: keyPath))
        }
    }
    
    /// Maps received data at key path into a Decodable object. If the conversion fails, the signal errors.
    public func map<D: Decodable>(_ type: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder()) -> Maybe<D> {
        return flatMap { response -> Maybe<D> in
            return Maybe.just(try response.map(type, atKeyPath: keyPath, using: decoder))
        }
    }
}



extension MoyaProvider: ReactiveCompatible {}

public extension Reactive where Base: MoyaProviderType {
    
    /// Designated request-making method.
    ///
    /// - Parameters:
    ///   - token: Entity, which provides specifications necessary for a `MoyaProvider`.
    ///   - callbackQueue: Callback queue. If nil - queue from provider initializer will be used.
    /// - Returns: Single response object.
    public func request(_ token: Base.Target, callbackQueue: DispatchQueue? = nil) -> Maybe<Response> {
        return base.rxRequest(token, callbackQueue: callbackQueue)
    }
    
    /// Designated request-making method with progress.
    public func requestWithProgress(_ token: Base.Target, callbackQueue: DispatchQueue? = nil) -> Observable<ProgressResponse> {
        return base.rxRequestWithProgress(token, callbackQueue: callbackQueue)
    }
}

internal extension MoyaProviderType {
    
    internal func rxRequest(_ token: Target, callbackQueue: DispatchQueue? = nil) -> Maybe<Response> {
        return Maybe.create { [weak self] single in
            let cancellableToken = self?.request(token, callbackQueue: callbackQueue, progress: nil) { result in
                switch result {
                case let .success(response):
//                    Ob.debug(response.data.string)
                    single(.success(response))
                case let .failure(error):
                    single(.error(error))
                }
            }
            return Disposables.create {
                cancellableToken?.cancel()
            }
        }
    }
    
    internal func rxRequestWithProgress(_ token: Target, callbackQueue: DispatchQueue? = nil) -> Observable<ProgressResponse> {
        let progressBlock: (AnyObserver) -> (ProgressResponse) -> Void = { observer in
            return { progress in
                observer.onNext(progress)
            }
        }
        
        let response: Observable<ProgressResponse> = Observable.create { [weak self] observer in
            let cancellableToken = self?.request(token, callbackQueue: callbackQueue, progress: progressBlock(observer)) { result in
                switch result {
                case .success:
                    observer.onCompleted()
                case let .failure(error):
                    observer.onError(error)
                }
            }
            
            return Disposables.create {
                cancellableToken?.cancel()
            }
        }
        
        // Accumulate all progress and combine them when the result comes
        return response.scan(ProgressResponse()) { last, progress in
            let progressObject = progress.progressObject ?? last.progressObject
            let response = progress.response ?? last.response
            return ProgressResponse(progress: progressObject, response: response)
        }
    }
}

extension ObservableType where E == Response {
    
    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filter(statusCodes: ClosedRange<Int>) -> Observable<E> {
        return flatMap { response -> Observable<E> in
            return Observable.just(try response.filter(statusCodes: statusCodes))
        }
    }
    
    public func filter(statusCode: Int) -> Observable<E> {
        return flatMap { response -> Observable<E> in
            return Observable.just(try response.filter(statusCode: statusCode))
        }
    }
    
    public func filterSuccessfulStatusCodes() -> Observable<E> {
        return flatMap { response -> Observable<E> in
            return Observable.just(try response.filterSuccessfulStatusCodes())
        }
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> Observable<E> {
        return flatMap { response -> Observable<E> in
            return Observable.just(try response.filterSuccessfulStatusAndRedirectCodes())
        }
    }
    
    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    public func mapImage() -> Observable<Image?> {
        return flatMap { response -> Observable<Image?> in
            return Observable.just(try response.mapImage())
        }
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON(failsOnEmptyData: Bool = true) -> Observable<Any> {
        return flatMap { response -> Observable<Any> in
            return Observable.just(try response.mapJSON(failsOnEmptyData: failsOnEmptyData))
        }
    }
    
    /// Maps received data at key path into a String. If the conversion fails, the signal errors.
    public func mapString(atKeyPath keyPath: String? = nil) -> Observable<String> {
        return flatMap { response -> Observable<String> in
            return Observable.just(try response.mapString(atKeyPath: keyPath))
        }
    }
    
    /// Maps received data at key path into a Decodable object. If the conversion fails, the signal errors.
    public func map<D: Decodable>(_ type: D.Type, atKeyPath keyPath: String? = nil, using decoder: JSONDecoder = JSONDecoder()) -> Observable<D> {
        return flatMap { response -> Observable<D> in
            return Observable.just(try response.map(type, atKeyPath: keyPath, using: decoder))
        }
    }
}

extension ObservableType where E == ProgressResponse {
    
    /**
     Filter completed progress response and maps to actual response
     - returns: response associated with ProgressResponse object
     */
    public func filterCompleted() -> Observable<Response> {
        return self
            .filter { $0.completed }
            .flatMap { progress -> Observable<Response> in
                // Just a formatlity to satisfy the compiler (completed progresses have responses).
                switch progress.response {
                case .some(let response): return .just(response)
                case .none: return .empty()
                }
        }
    }
    
    /**
     Filter progress events of current ProgressResponse
     - returns: observable of progress events
     */
    public func filterProgress() -> Observable<Double> {
        return self.filter { !$0.completed }.map { $0.progress }
    }
}

